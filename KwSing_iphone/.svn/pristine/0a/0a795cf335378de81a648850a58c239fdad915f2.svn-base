//
//  RankViewController.m
//  KwSing
//
//  Created by Qian Hu on 12-8-3.
//  Copyright (c) 2012年 酷我音乐. All rights reserved.
//

#import "RankViewController.h"
#include "SearchBarView.h"
#include "SearchTipView.h"
#include "SearchViewController.h"
#include "KSAppDelegate.h"
#include "RanksListRequest.h"
#include "MessageManager.h"
#include "HttpRequest.h"
#include "CacheMgr.h"
#include "KwTools.h"
#include "globalm.h"
#include <QuartzCore/QuartzCore.h>
#include "IMusicLibObserver.h"
#include "ArtistRankViewController.h"
#include "ImageMgr.h"
#include "MusicListViewController.h"

const int TagSearchTip = 105;
const int TagSearchBar = 100;
const int TagRankList = 101;
const int TagListLabel = 102;
const int TagListImage = 103;
const int TagShadowView = 104;


@interface RankViewController ()<SearchTipDelegate,UISearchBarDelegate,UITableViewDataSource,UITableViewDelegate>
{
    CRanksListRequest * m_pRequest;
    std::vector<ListInfo> m_vecRankList;
    bool bsearching;
    bool m_bNetFail;
    bool m_bReLoading;
}
@end

@implementation RankViewController
@synthesize musiclibDelegate;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
	// Do any additional setup after loading the view.
    bsearching = false;
    
//    UIImage* pShadow=CImageMgr::GetImageEx("topShadow.png");
//    UIImageView * topshadowView = [[[UIImageView alloc]initWithImage:pShadow]autorelease];
//    CGRect rcshadow = CGRectMake(0, 0, 320, pShadow.size.height);
//    [topshadowView setFrame:rcshadow];
//    topshadowView.tag = TagShadowView;
//    [self.view addSubview:topshadowView];
    self.view.backgroundColor = UIColorFromRGBValue(0xededed);
    
    UITableView * rankList = [[[UITableView alloc]init]autorelease];
    rankList.tag = TagRankList;
    rankList.frame = CGRectMake(0, 43, 320, self.view.frame.size.height-43);
    rankList.delegate = self;
    rankList.dataSource = self;
    rankList.separatorStyle = UITableViewCellSeparatorStyleNone;
    rankList.backgroundColor = UIColorFromRGBValue(0xededed);
    
    [[self view] addSubview:rankList];
    
    SearchBarView * searchBar = [[[SearchBarView alloc]initWithFrame:CGRectMake(0, 0, 320, 45)]autorelease];
    searchBar.tag = TagSearchBar;
    searchBar.delegate = self;
    [searchBar addSearchButtonWithTarget:self action:@selector(Search)];
    [searchBar addSearchCancelButtonWithTarget:self action:@selector(CancelSearch)];
    [[self view] addSubview:searchBar];
    
    UIActivityIndicatorView * loading = [[[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(0, 0, 86, 86)]autorelease];
    loading.tag = TagLoading;
    loading.activityIndicatorViewStyle = UIActivityIndicatorViewStyleWhiteLarge;
    loading.backgroundColor = UIColorFromRGBAValue(0x000000,0xb5);
    //loading.layer.masksToBounds = true;
    loading.layer.cornerRadius = 10;
    loading.center = CGPointMake(160, 250);
    loading.hidden = true;
    UILabel *label=[[[UILabel alloc] initWithFrame:CGRectMake(0, 56, 86, 30)] autorelease];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setTextAlignment:UITextAlignmentCenter];
    [label setText:@"正在加载中"];
    [label setTextColor:[UIColor whiteColor]];
    [label setFont:[UIFont systemFontOfSize:13]];
    
    [loading addSubview:label];
    
    SearchTipView * tipview = [[[SearchTipView alloc]initWithFrame:CGRectMake(0, 43, 320, self.view.frame.size.height)]autorelease];
    //tipview.hidden = true;
    tipview.alpha = 0;
    tipview.backgroundColor = [UIColor grayColor];
    tipview.tag = TagSearchTip;
    tipview.searchdelegate = self;
    [self.view addSubview:tipview];
    
    m_pRequest = new CRanksListRequest(eMusicRank);
    m_vecRankList = m_pRequest->QuickGetList();
    if(m_vecRankList.size() == 0)
    {
        loading.hidden = false;
        [loading startAnimating];
    }
    
    UIImageView * netfailview = [[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 320, 416)]autorelease];
    netfailview.tag = TagNetFailView;
    netfailview.userInteractionEnabled = true;
    netfailview.hidden = true;
    netfailview.backgroundColor = UIColorFromRGBValue(0xededed);
    netfailview.image = CImageMgr::GetImageEx("failmsgNoNet.png");
    [self.view addSubview:netfailview];
    
    UIImageView * loadfailview = [[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 320, 416)]autorelease];
    loadfailview.tag = TagLoadFailView;
    loadfailview.userInteractionEnabled = true;
    loadfailview.hidden = true;
    loadfailview.backgroundColor = UIColorFromRGBValue(0xededed);
    loadfailview.image = CImageMgr::GetImageEx("failmsgLoadFail.png");
    [self.view addSubview:loadfailview];
//       [self LoadRankPic];
    [self UpdateList];
    
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
}

-(void)dealloc
{
    [super dealloc];
    delete m_pRequest;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

-(void)onKSongClick :(id)sender
{
     SYN_NOTIFY(OBSERVER_ID_MUSICLIB, IMusicLibObserver::RecordMusic,"");
}

-(void)OnArtistList :(id)sender
{
    ArtistRankViewController * artistview = [[[ArtistRankViewController alloc]init] autorelease];
    artistview.musiclibDelegate = musiclibDelegate;
    [ROOT_NAVAGATION_CONTROLLER pushViewController: artistview animated:YES];
}

-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
    if(m_bNetFail && !m_bReLoading)
    {
        m_bReLoading = true;
        [self UpdateList];
    }
}

-(void)UpdateList
{
    KS_BLOCK_DECLARE
    {
        if(m_pRequest->UpdateList())
        {
            KS_BLOCK_DECLARE
            {
                if(m_bNetFail)
                {
                    UIImageView * netfailview = (UIImageView*)[self.view viewWithTag:TagNetFailView];
                    netfailview.hidden = true;
                    UIImageView * loadfailview = (UIImageView*)[self.view viewWithTag:TagLoadFailView];
                    loadfailview.hidden = true;
                }
                m_bNetFail = false;
                m_bReLoading = false;
                UIActivityIndicatorView * loading = (UIActivityIndicatorView *)[self.view viewWithTag:TagLoading];
                [loading stopAnimating];
                loading.hidden = true;
                m_vecRankList = m_pRequest->GetRankList();
                UITableView * listview = (UITableView*)[self.view viewWithTag:TagRankList];
                [listview reloadData];
                //[self LoadRankPic];
            }
            KS_BLOCK_SYNRUN()
        }
        else
        {
            KS_BLOCK_DECLARE
            {
                UIActivityIndicatorView * loading = (UIActivityIndicatorView *)[self.view viewWithTag:TagLoading];
                [loading stopAnimating];
                loading.hidden = true;
                m_bReLoading = false;
                if(m_vecRankList.size() == 0)
                {
                    m_bNetFail = true;
                    if(CHttpRequest::GetNetWorkStatus() == NETSTATUS_NONE)
                    {
                        UIImageView * netfailview = (UIImageView*)[self.view viewWithTag:TagNetFailView];
                        netfailview.hidden = false;
                        [self.view bringSubviewToFront:netfailview];
                    }
                    else
                    {
                        UIImageView * loadfailview = (UIImageView*)[self.view viewWithTag:TagLoadFailView];
                        loadfailview.hidden = false;
                        [self.view bringSubviewToFront:loadfailview];
                    }
                }
            }
            KS_BLOCK_SYNRUN()
        }

    }
    KS_BLOCK_RUN_THREAD();
}


-(void)LoadRankPic : (int)row  View : (UIImageView *) picView
{
    std::string strPicUrl = m_vecRankList[row-1].strPicUrl;
    std::string strRankPic;
    BOOL bouttime;
    if(CCacheMgr::GetInstance()->GetCacheFile(strPicUrl,strRankPic,bouttime) && !bouttime)
    {
        UIImage *image = [UIImage imageWithContentsOfFile:[NSString stringWithUTF8String:strRankPic.c_str()]];
        picView.image = image;
    }
    else
    {
        std::string strname = strPicUrl.substr(strPicUrl.rfind("/")+1,-1);
        NSString *strSavePath = KwTools::Dir::GetPath(KwTools::Dir::PATH_CASHE);
        strSavePath = [strSavePath stringByAppendingPathComponent: [NSString stringWithUTF8String:strname.c_str()]];
        
        KS_BLOCK_DECLARE
        {
            NSError *error = nil;
            NSURLResponse * response;
            
            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:[NSString stringWithUTF8String:strPicUrl.c_str()]]];
            NSData * data = [NSURLConnection sendSynchronousRequest:request returningResponse: &response error:&error];
            if([data length] > 0 && error==nil){
                KS_BLOCK_DECLARE
                {
                    if([data writeToFile:strSavePath atomically:true])
                    {
                        CCacheMgr::GetInstance()->Cache(T_MONTH, 1, strPicUrl, [strSavePath UTF8String]);
                        KwTools::Dir::DeleteFile(strSavePath);
                    }
                    UITableView * tableview = (UITableView*)[self.view viewWithTag:TagRankList];
                    UITableViewCell *oneCell = [tableview cellForRowAtIndexPath:[NSIndexPath indexPathForRow:row inSection:0]];
                    UIImageView * Rankimage = (UIImageView*)[oneCell viewWithTag:TagListImage];
                    Rankimage.image = [UIImage imageWithData:data];
                }
                KS_BLOCK_SYNRUN();
            }
            else
            {
                //NSLog(@"downpic fail");
            }
        }
        KS_BLOCK_RUN_THREAD();

        
//            KS_BLOCK_DECLARE
//            {
//                CHttpRequest req(strPicUrl);
//                if(req.SyncSendRequest([strSavePath UTF8String]))
//                {
//                    KS_BLOCK_DECLARE
//                    {
//                        //CCacheMgr::GetInstance()->Cache(T_MONTH, 1, strPicUrl, [strSavePath UTF8String]);
//                        UITableView * tableview = (UITableView*)[self.view viewWithTag:TagRankList];
//                        UITableViewCell *oneCell = [tableview cellForRowAtIndexPath:[NSIndexPath indexPathForRow:i inSection:0]];
//                        UIImageView * Rankimage = (UIImageView*)[oneCell viewWithTag:TagListImage];
//                        Rankimage.image = [UIImage imageWithContentsOfFile:strSavePath];
//                       // KwTools::Dir::DeleteFile(strSavePath);
//                    }
//                    KS_BLOCK_SYNRUN()
//                }
//            }
//            KS_BLOCK_RUN_THREAD();
    }
}

-(void)CancelSearch
{
    [self MoveSearchView:NO];
//    SearchTipView * tipview = (SearchTipView*)[self.view viewWithTag:TagSearchTip];
//    tipview.hidden = true;
    SearchBarView * searchbar = (SearchBarView*)[self.view viewWithTag:TagSearchBar];
    searchbar.text = @"";
    [searchbar resignFirstResponder];
    searchbar.editing = false;
}

-(void)Search
{
    SearchBarView * searchbar = (SearchBarView*)[self.view viewWithTag:TagSearchBar];
    if(searchbar.text == nil || [searchbar.text isEqualToString:@""])
        return;
    [self MoveSearchView:NO];
    [searchbar resignFirstResponder];
    searchbar.editing = false;
//    SearchTipView * tipview = (SearchTipView*)[self.view viewWithTag:TagSearchTip];
//    tipview.hidden = true;    

    SearchViewController * searchview = [[[SearchViewController alloc]init] autorelease];
    searchview.searchWord = searchbar.text;
    searchview.musiclibDelegate = musiclibDelegate;
    [ROOT_NAVAGATION_CONTROLLER pushViewController: searchview animated:YES];
    
    searchbar.text = @"";
}

- (void)MoveSearchView:(BOOL)bsearch
{
	void (^animations)(void) = ^{
             UIView * rootview = self.view.superview.superview;
            SearchTipView * tipview = (SearchTipView*)[self.view viewWithTag:TagSearchTip];
            if (bsearch)
            {
                rootview.frame = CGRectOffset(rootview.frame, 0.0f, -44);
                tipview.alpha = 1;
            }
            else
            {
                tipview.alpha = 0;
                if(rootview.frame.origin.y < 0)
                    rootview.frame = CGRectOffset(rootview.frame, 0.0f,44);
            }
            
	};
     if(bsearching != bsearch)
     {
        UIView * rootview = self.view;
        CGRect rc = rootview.frame;
        if(bsearch)
            rc.size.height += 44;
         else
             rc.size.height -= 44;
         self.view.frame = rc;
         
         rootview = self.view.superview.superview;
         rc = rootview.frame;
         if(bsearch)
             rc.size.height += 44;
         else
             rc.size.height -= 44;
         self.view.superview.superview.frame = rc;
         
         rootview = self.view.superview;
         rc = rootview.frame;
         if(bsearch)
             rc.size.height += 44;
         else
             rc.size.height -= 44;
         self.view.superview.frame = rc;
         
		[UIView animateWithDuration:0.2
							  delay:0
							options:UIViewAnimationOptionCurveEaseInOut
						 animations:animations
						 completion:nil];
         bsearching = bsearch;
     }
}


#pragma mark - SearchDelegate
- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar
{
    [self MoveSearchView:YES];

    SearchBarView * searchbar = (SearchBarView*)[self.view viewWithTag:TagSearchBar];
    searchbar.editing = true;
    SearchTipView * tipview = (SearchTipView*)[self.view viewWithTag:TagSearchTip];
//    tipview.hidden = false;
    [tipview setInputWord:searchbar.text];
    
}

- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText
{
    SearchTipView * tipview = (SearchTipView*)[self.view viewWithTag:TagSearchTip];
    [tipview setInputWord:searchText];
}

- (BOOL)searchBar:(UISearchBar *)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text
{
    if (range.location>=50)
    {
        return  NO;
    }
    else
    {
        return YES;
    }
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar
{
    [self Search];
}

#pragma mark - searchTipDelegate
- (id)GetSearchHistory
{
    return [(KSMusicLibDelegate*)musiclibDelegate GetSearchHistory];
}

-(void)SelectTip:(NSString*)word
{
    SearchBarView * searchbar = (SearchBarView*)[self.view viewWithTag:TagSearchBar];
    searchbar.text = word;
    [self Search];
}

-(void)ScrollTip
{
    SearchBarView * searchbar = (SearchBarView*)[self.view viewWithTag:TagSearchBar];
    [searchbar resignFirstResponder];
    
}

-(void)ClearSearchHistroy
{
    [(KSMusicLibDelegate*)musiclibDelegate ClearSearchHistroy];
}

-(void)DeleteSearchHistroy:(id)key
{
    [(KSMusicLibDelegate*)musiclibDelegate DeleteSearchHistroy:key];
}


#pragma mark -TableView DataSource and Delegate

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return  m_vecRankList.size()+1;
}

-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 0;
}
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSInteger row = [indexPath row];
    if(row == 0)
        return 75;
    else
        return 68;
}

-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *s_commontableIdentifier = @"commonIdentifier";
    static NSString *s_firstableIdentifier = @"firstIdentifier";
    NSInteger row = [indexPath row];
    UITableViewCell* cell = nil;
    if(row == 0)
    {
        cell = [tableView dequeueReusableCellWithIdentifier:s_firstableIdentifier];
        if(cell == nil)
        {
            cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:s_firstableIdentifier] autorelease];
            
            UIImageView * bkimage = [[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 320, 75)]autorelease];
            bkimage.image = CImageMgr::GetImageEx("listbk_5_1.png");
            cell.backgroundView = bkimage;
            
            UIButton* btn = [UIButton buttonWithType:UIButtonTypeCustom];
            btn.frame = CGRectMake(9, 8, 146,59);
            [btn setBackgroundImage:CImageMgr::GetImageEx("freesingBtn.png") forState:UIControlStateNormal];
            [btn setBackgroundImage:CImageMgr::GetImageEx("freesingBtnDown.png") forState:UIControlStateHighlighted];
            [btn addTarget:self action:@selector(onKSongClick:) forControlEvents:UIControlEventTouchUpInside];
            [cell.contentView addSubview:btn];
            
            UIButton* btn1 = [UIButton buttonWithType:UIButtonTypeCustom];
            btn1.frame = CGRectMake(162, 8, 146,59);
            [btn1 setBackgroundImage:CImageMgr::GetImageEx("artistlistBtn.png") forState:UIControlStateNormal];
            [btn1 setBackgroundImage:CImageMgr::GetImageEx("artistlistBtnDown.png") forState:UIControlStateHighlighted];
            [btn1 addTarget:self action:@selector(OnArtistList:) forControlEvents:UIControlEventTouchUpInside];
            [cell.contentView  addSubview:btn1];
            
             cell.selectionStyle = UITableViewCellSelectionStyleGray;
        }

    }
    else
    {
        cell = [tableView dequeueReusableCellWithIdentifier:s_commontableIdentifier];
        if(cell == nil)
        {
            cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:s_commontableIdentifier] autorelease];
            
            UIImageView * bkimage = [[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 320, 68)]autorelease];
            bkimage.image = CImageMgr::GetImageEx("listbk_5_1.png");
            cell.backgroundView = bkimage;
            
            UIImageView * RankImage = [[[UIImageView alloc]initWithFrame:CGRectMake(4, 4, 60, 60)]autorelease];
            RankImage.tag = TagListImage;
            [cell.contentView addSubview:RankImage];
            
            UILabel *textLabel = [[[UILabel alloc]initWithFrame:CGRectMake(79, 27, 230, 20)]autorelease];
            textLabel.font= [UIFont systemFontOfSize:17];
            textLabel.lineBreakMode = UILineBreakModeTailTruncation;
            textLabel.backgroundColor = [UIColor clearColor];
            [textLabel setTag:TagListLabel];
            [cell.contentView addSubview:textLabel];
            
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            cell.selectionStyle = UITableViewCellSelectionStyleGray;
            
        }
        
        
        if(row -1 < m_vecRankList.size())
        {
            UIImageView * Rankimage = (UIImageView*)[cell viewWithTag:TagListImage];
            Rankimage.image = CImageMgr::GetImageEx("defaultface.png");
            [self LoadRankPic:row View:Rankimage];
            UILabel * textLabel = (UILabel*)[cell viewWithTag:TagListLabel];
            textLabel.text = [NSString stringWithUTF8String:m_vecRankList[row-1].strName.c_str()];
        }

    }
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    NSInteger row = [indexPath row];
    if(row - 1 < m_vecRankList.size())
    {
        MusicListViewController * listview = [[[MusicListViewController alloc]initwithListInfo :m_vecRankList[row-1]] autorelease];
        listview.title = [NSString stringWithUTF8String:m_vecRankList[row-1].strName.c_str()];
        listview.musiclibDelegate = musiclibDelegate;
        [ROOT_NAVAGATION_CONTROLLER pushViewController: listview animated:YES];
    }
}


@end
