//
//  BookInfoList.cpp
//  kwbook
//
//  Created by 单 永杰 on 13-12-19.
//  Copyright (c) 2013年 单 永杰. All rights reserved.
//

#include "BookInfoList.h"

CBookInfoList * CBookInfoList::getInstance(){
    static CBookInfoList sInstance;
    sInstance.LoadAllBooks();
    
    return &sInstance;
}
/*
BOOL CBookInfoList::addBook(CBookInfo* recent_book){
    CBookInfo* book_info = GetCurBook([[NSString stringWithFormat:@"%s", recent_book->m_strBookId.c_str()] intValue]);
    if (book_info) {
        return;
    }else {
        CBookInfo* cur_book = new CCollectBookInfo;
        *((CBookInfo*)cur_book) = *recent_book;
        m_vecCollectList.push_back(cur_book);
    }
    
    SaveAllBooks();
}

CCollectBookInfo* CCollectBookList::GetCurBook(const unsigned& un_book_id){
    for (std::vector<CCollectBookInfo *>::iterator iter = m_vecCollectList.begin(); iter!= m_vecCollectList.end(); iter++) {
        if(un_book_id == [[NSString stringWithFormat:@"%s", (*iter)->m_strBookId.c_str()] intValue])
            return (*iter);
    }
    
    return NULL;
}

void CCollectBookList::DeleteBookInfo(const unsigned& un_book_id){
    
    CCollectBookInfo* book_info = GetCurBook(un_book_id);
    if (book_info) {
        for (std::vector<CRecentBookInfo *>::iterator iter = m_vecCollectList.begin(); iter!= m_vecCollectList.end(); iter++) {
            if(un_book_id == [[NSString stringWithFormat:@"%s", (*iter)->m_strBookId.c_str()] intValue])
            {
                iter = m_vecCollectList.erase(iter);
                break;
            }
        }
        
        delete book_info;
        book_info = NULL;
    }
    
    SaveAllBooks();
}

BOOL CCollectBookList::SaveAllBooks(){
    NSMutableArray *arrTask = [NSMutableArray arrayWithCapacity:m_vecCollectList.size()];
    for (std::vector<CCollectBookInfo *>::iterator iter = m_vecCollectList.begin(); iter!= m_vecCollectList.end(); iter++) {
        CCollectBookInfo* temp = ((CCollectBookInfo*)(*iter));
        NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
        temp->SaveToDict(dict);
        [arrTask addObject:dict];
    }
    
    NSString *filepath = KwTools::Dir::GetPath(KwTools::Dir::PATH_DUCUMENT);
    NSString *str = [filepath stringByAppendingPathComponent:FILENAME_COLLECT_BOOKS];
    if(KwTools::Dir::IsExistFile([str UTF8String]) && !KwTools::Dir::DeleteFile(str))
    {
        return false;
    }
    BOOL bret = [arrTask writeToFile:str atomically:YES];
    
    return bret;
}

BOOL CCollectBookList::LoadAllBooks(){
    m_vecCollectList.clear();
    NSString *filepath = KwTools::Dir::GetPath(KwTools::Dir::PATH_DUCUMENT);
    filepath = [filepath stringByAppendingPathComponent:FILENAME_COLLECT_BOOKS];
    NSMutableArray *arrLocalTask;
    if(KwTools::Dir::IsExistFile(filepath))
    {
        arrLocalTask = [NSMutableArray arrayWithContentsOfFile:filepath];
        for (NSDictionary *dict in arrLocalTask)
        {
            CCollectBookInfo * bookInfo = new CCollectBookInfo;
            ((CCollectBookInfo*)bookInfo)->LoadFromDict(dict);
            
            m_vecCollectList.push_back(bookInfo);
        }
    }
    
    return TRUE;
}*/