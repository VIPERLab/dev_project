//
//  PlayControlViewController.m
//  kwbook
//
//  Created by 熊 改 on 13-12-5.
//  Copyright (c) 2013年 单 永杰. All rights reserved.
//

#import "PlayControlViewController.h"
#import "globalm.h"
#import "ImageMgr.h"
#import "PlayBookList.h"
#import "AudioPlayerManager.h"
#import "IObserverAudioPlayState.h"
#import "IObserverNetBufferringState.h"
#import "CollectBookList.h"
#import "LocalBookRequest.h"
#import "MessageManager.h"
#import "KBBookDetailViewController.h"
#import "LocalBookRequest.h"
#import "BookInfoList.h"
#import "KBAppDelegate.h"
#import "iToast.h"
#import <CoreText/CoreText.h>
#include "BookManagement.h"
#import "UMengLog.h"
#import "KwUMengElement.h"


#define TAG_BTN_DETAIL      71
#define TAG_BTN_COLLECT     72
#define TAG_BTN_DOWNLOAD    73
#define TAG_BTN_LAST        74
#define TAG_BTN_PLAY        75
#define TAG_BTN_NEXT        76
#define TAG_BTN_TIMER       77
#define TAG_BTN_EPISODE     78

@interface PlayControlViewController ()<IObserverAudioPlayState>
{
    NSTimer *_closeTimer;
    NSTimer *_refreshTimer;
    BOOL     _hasCollected;
    BOOL     _hasDownLoad;
}
@property (nonatomic , strong) UIView       *contentView;
@property (nonatomic , strong) UILabel      *nameLabel;
@property (nonatomic , strong) UILabel      *playTimeLabel;
@property (nonatomic , strong) UILabel      *totalTimeLabel;
@property (nonatomic , strong) UISlider     *playSlider;
@property (nonatomic , strong) UIImageView  *bufferProgressView;

@end

@implementation PlayControlViewController


const float kProgressWidth = 230;
const float kTimeToClose   = 2.0f;
const float kTimeToRefresh = 1.0f;
const float kAnimationDuration = 0.4f;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        GLOBAL_ATTACH_MESSAGE_OC(OBSERVER_ID_PLAY_STATE, IObserverAudioPlayState);
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
    [[self view] setBackgroundColor:[UIColor clearColor]];
    
    self.contentView = ({
        UIView *contentView = [[UIView alloc] initWithFrame:CGRectMake(128, 536, 64, 64)];
        [contentView.layer setCornerRadius:10.0];
        [contentView setBackgroundColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:0.95]];
        
//        for (int i = 1; i<6; ++i) {
//            UIImageView *lineBreakView = [[UIImageView alloc] initWithImage:CImageMgr::GetImageEx("LineBreakImage.png")];
//            [lineBreakView setFrame:CGRectMake(0, 59*i, 300, 1)];
//            [contentView addSubview:lineBreakView];
//        }
        
        self.nameLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 280, 59)];
        //[self.nameLabel setEditable:NO];
        self.nameLabel.numberOfLines = 0;
        [self.nameLabel setBackgroundColor:[UIColor clearColor]];
        [self.nameLabel setTextColor:[UIColor whiteColor]];
        [self.nameLabel setTextAlignment:NSTextAlignmentCenter];
        [self.nameLabel setFont:[UIFont systemFontOfSize:17.0]];
        [contentView addSubview:self.nameLabel];
        
        UIButton *detailBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [detailBtn setImage:CImageMgr::GetImageEx("DetailBtn.png") forState:UIControlStateNormal];
        [detailBtn setImage:CImageMgr::GetImageEx("DetailBtnDown.png") forState:UIControlStateHighlighted];
        [detailBtn setFrame:CGRectMake(246, 252, 42, 37.5)];
        [detailBtn setTag:TAG_BTN_DETAIL];
        [detailBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [contentView addSubview:detailBtn];
        
        UIButton *collectBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [collectBtn setImage:CImageMgr::GetImageEx("CollectionBtn.png") forState:UIControlStateNormal];
        [collectBtn setImage:CImageMgr::GetImageEx("CollectionBtnDown.png") forState:UIControlStateSelected];
        [collectBtn setFrame:CGRectMake(72.5, 69, 35, 42.5)];
        [collectBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [collectBtn setTag:TAG_BTN_COLLECT];
        [contentView addSubview:collectBtn];
        
        UIButton *downloadBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [downloadBtn setImage:CImageMgr::GetImageEx("DownloadBtn.png") forState:UIControlStateNormal];
        //[downloadBtn setImage:CImageMgr::GetImageEx("DownloadBtnDown.png") forState:UIControlStateSelected];
        [downloadBtn setFrame:MoveRightRect(collectBtn.frame, 114)];
        [downloadBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [downloadBtn setTag:TAG_BTN_DOWNLOAD];
        [contentView addSubview:downloadBtn];
        
        float gap = 0;
        if (!isIOS7()) {
            gap = 3;
        }
        
        self.playTimeLabel = ({
            UILabel *playTimeLabel = [[UILabel alloc] initWithFrame:CGRectMake(5, 145+gap, 33, 9)];
            [playTimeLabel setBackgroundColor:[UIColor clearColor]];
            [playTimeLabel setTextColor:[UIColor whiteColor]];
            [playTimeLabel setFont:[UIFont systemFontOfSize:9.0]];
            [playTimeLabel setText:@"00:00"];
            playTimeLabel;
        });
        [contentView addSubview:self.playTimeLabel];
        
        self.totalTimeLabel = ({
            UILabel *totalTimeLabel = [[UILabel alloc] initWithFrame:CGRectMake(270, 145+gap, 33, 9)];
            [totalTimeLabel setBackgroundColor:[UIColor clearColor]];
            [totalTimeLabel setTextColor:[UIColor whiteColor]];
            [totalTimeLabel setFont:[UIFont systemFontOfSize:9.0]];
            [totalTimeLabel setText:@"00:00"];
            totalTimeLabel;
        });
        [contentView addSubview:self.totalTimeLabel];
        
        
        self.bufferProgressView = ({
            
            UIImageView *bufferProgressView = [[UIImageView alloc] initWithFrame:CGRectMake(35, 145+gap, 0, 7)];
            [bufferProgressView setImage:CImageMgr::GetImageEx("PlayProgress_7.png")];
            bufferProgressView;
        });
        [contentView addSubview:self.bufferProgressView];
        
        
        self.playSlider = [[UISlider alloc] initWithFrame:CGRectMake(33, 140, 234, 18)];
        UIImage *minImage = CImageMgr::GetImageEx("PlaySliderMin_7.png");
        UIImage *maxImage = CImageMgr::GetImageEx("PlaySliderMax_7.png");
        [self.playSlider setMaximumTrackImage:maxImage forState:UIControlStateNormal];
        [self.playSlider setMinimumTrackImage:minImage forState:UIControlStateNormal];
        [self.playSlider setThumbImage:CImageMgr::GetImageEx("PlayThumb.png") forState:UIControlStateNormal];
        [self.playSlider addTarget:self action:@selector(onSliderChanged:) forControlEvents:UIControlEventTouchUpInside];
        
        [contentView addSubview:self.playSlider];
        
        UIButton *lastBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [lastBtn setImage:CImageMgr::GetImageEx("LastBtn.png") forState:UIControlStateNormal];
        [lastBtn setImage:CImageMgr::GetImageEx("LastBtnDown.png") forState:UIControlStateHighlighted];
        [lastBtn setFrame:CGRectMake(57, 190, 35.5, 35)];
        [lastBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [lastBtn setTag:TAG_BTN_LAST];
        [contentView addSubview:lastBtn];
        
        UIButton *playBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [playBtn setImage:CImageMgr::GetImageEx("PlayBtn.png") forState:UIControlStateNormal];
        [playBtn setImage:CImageMgr::GetImageEx("PauseBtn.png") forState:UIControlStateSelected];
        [playBtn setFrame:CGRectMake(126.5, 185, 47.5, 47)];
        [playBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [playBtn setTag:TAG_BTN_PLAY];
        [contentView addSubview:playBtn];
        
        UIButton *nextBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [nextBtn setImage:CImageMgr::GetImageEx("NextBtn.png") forState:UIControlStateNormal];
        [nextBtn setImage:CImageMgr::GetImageEx("NextBtnDown.png") forState:UIControlStateHighlighted];
        [nextBtn setFrame:CGRectMake(213, 192, 35.5, 35)];
        [nextBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [nextBtn setTag:TAG_BTN_NEXT];
        [contentView addSubview:nextBtn];
        
        UIButton *timeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [timeBtn setImage:CImageMgr::GetImageEx("TimerBtn.png") forState:UIControlStateNormal];
        [timeBtn setImage:CImageMgr::GetImageEx("TimerBtnDown.png") forState:UIControlStateHighlighted];
        [timeBtn setImage:CImageMgr::GetImageEx("TimerBtnDown.png") forState:UIControlStateSelected];
        [timeBtn setFrame:CGRectMake(72.5, 249, 41, 41)];
        [timeBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [timeBtn setTag:TAG_BTN_TIMER];
        //[contentView addSubview:timeBtn];
        
        UIButton *episodeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [episodeBtn setImage:CImageMgr::GetImageEx("EpisodeBtn.png") forState:UIControlStateNormal];
        [episodeBtn setImage:CImageMgr::GetImageEx("EpisodeBtnDown.png") forState:UIControlStateHighlighted];
        [episodeBtn setImage:CImageMgr::GetImageEx("EpisodeBtnDown.png") forState:UIControlStateSelected];
        [episodeBtn setFrame:MoveRightRect(timeBtn.frame, 114)];
        [episodeBtn addTarget:self action:@selector(onBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [episodeBtn setTag:TAG_BTN_EPISODE];
        //[contentView addSubview:episodeBtn];
        
        
        contentView;
    });
    [[self view] addSubview:self.contentView];
    [self showAnimation];
    [self initializeControls];
    [self setTimer];
}
- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
#pragma mark
#pragma mark quick methosd

-(NSString *)getStringFromSeconds:(float)seconds
{
    unsigned mins = seconds/60;
    unsigned secs = (int)seconds%60;
    return [NSString stringWithFormat:@"%02d:%02d",mins,secs];
}
-(void)setAllButtonsEnable:(BOOL)enabled
{
    for (UIButton *btn in self.contentView.subviews) {
        if ([btn isKindOfClass:[UIButton class]]) {
            [btn setEnabled:enabled];
        }
    }
}
#pragma mark 
#pragma mark show and hide
-(void)showAnimation
{
    float height = [UIScreen mainScreen].bounds.size.height;
    int gap = 0;
    if (height>480) {
        gap = 39;
    }
    self.contentView.frame = CGRectMake(128, height - 32, 64, 64);
    self.contentView.alpha = 0;
    [UIView animateWithDuration:kAnimationDuration animations:^{
        self.contentView.frame = CGRectMake(10, height/2 - 188 + gap, 300, 300);
        self.contentView.alpha = 1;
    } completion:^(BOOL finished) {
    }];
}
-(void)hideAnimation
{
    float height = [UIScreen mainScreen].bounds.size.height;
    int gap = 0;
    if (height>480) {
        gap = 39;
    }
    self.contentView.frame = CGRectMake(10, height/2 - 188 + gap, 300, 300);
    [UIView animateWithDuration:kAnimationDuration animations:^{
        self.contentView.frame = CGRectMake(128, height - 32, 64, 64);
        self.contentView.alpha = 0;
    } completion:^(BOOL finished) {
        GLOBAL_DETACH_MESSAGE_OC(OBSERVER_ID_PLAY_STATE, IObserverAudioPlayState);
        [self willMoveToParentViewController:nil];
        [self removeFromParentViewController];
        [self.view removeFromSuperview];
        if (_refreshTimer.isValid) {
            [_refreshTimer invalidate];
        }
    }];
}
-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
    UITouch *touch = [touches anyObject];
    CGPoint location = [touch locationInView:self.contentView];
    if (location.x < 0 || location.y < 0 || location.x > 300 || location.y > 300) {
        [self hideAnimation];
    }
}
#pragma mark
#pragma mark change controls
/*
 三种情况会导致control的改变
 1,viewdidload之后的初始化
 2，play时候的进度以及缓冲的
 3，一首作品播放完毕进入下一首
 其中1和3都调用initializeControl，2调用refreshProgress
 initializeControl负责作品信息相关的内容的更改
 refreshProgress只负责进度相关的改变
 */
-(void)initializeControls
{
    CChapterInfo *chapInfo = CPlayBookList::getInstance()->getCurChapter();

    if (chapInfo != NULL) {
        _hasCollected = CCollectBookList::GetInstance()->GetCurBook([[NSString stringWithUTF8String:chapInfo->m_strBookId.c_str()] intValue]) != NULL;
        _hasDownLoad = CBookManagement::GetInstance()->GetChapterInfo(chapInfo->m_strBookId, chapInfo->m_unRid) != NULL;
        
        UIButton *collectBtn  = (UIButton *)[self.contentView viewWithTag:TAG_BTN_COLLECT];
        UIButton *downloadBtn = (UIButton *)[self.contentView viewWithTag:TAG_BTN_DOWNLOAD];
        UIButton *playBtn = (UIButton *)[self.contentView viewWithTag:TAG_BTN_PLAY];
        NSString *title = [NSString stringWithUTF8String:CPlayBookList::getInstance()->getCurChapter()->m_strName.c_str()];
        CGSize size = [self getTextDrawSize:title];
        CGRect beforeFrame = self.nameLabel.frame;
        beforeFrame.size.height = size.height;
        [self.nameLabel setFrame:beforeFrame];
        [self.nameLabel setText:[NSString stringWithUTF8String:CPlayBookList::getInstance()->getCurChapter()->m_strName.c_str()]];
        [self.totalTimeLabel setText:[self getStringFromSeconds:CAudioPlayerManager::getInstance()->duration()]];
        
        [collectBtn setSelected:_hasCollected];
        if (_hasDownLoad) {
            [downloadBtn setImage:CImageMgr::GetImageEx("DownloadBtnDown.png") forState:UIControlStateDisabled];
            [downloadBtn setEnabled:NO];//不能取消下载
        }
        
        
        if (CAudioPlayerManager::getInstance()->getCurPlayState() == E_AUDIO_PLAY_PLAYING) {
            [playBtn setSelected:YES];
        }
        else{
            [playBtn setSelected:NO];
        }
        //定时和定集todo
    }
    else{
        [self setAllButtonsEnable:NO];
    }
}
-(void)refreshProgress
{
    
    float bufferRadio = CAudioPlayerManager::getInstance()->bufferRation();
    float width = bufferRadio * kProgressWidth;
    CGRect rect = self.bufferProgressView.frame;
    if (((int)width) != ((int)rect.size.width)) {
        rect.size.width = width;
        [self.bufferProgressView setFrame:rect];
    }
    if (CAudioPlayerManager::getInstance()->getCurPlayState() == E_AUDIO_PLAY_PLAYING) {
        [self.playTimeLabel setText:[self getStringFromSeconds:CAudioPlayerManager::getInstance()->currentTime()]];
        
        float currentTime = CAudioPlayerManager::getInstance()->currentTime();
        float totalTime   = CAudioPlayerManager::getInstance()->duration();
        if (totalTime != 0) {
            float fPercent = currentTime / totalTime;
            [self.playSlider setValue:fPercent animated:YES];
        }
    }
}

#pragma mark
#pragma mark action methods

-(void)onBtnClick:(id)sender
{
    [self resetTimer];
    UIButton *button = sender;
    
    switch (button.tag) {
        case TAG_BTN_DETAIL:
        {
            UMengLog(KB_PLAY_CONTROL, "detail");
            [self hideAnimation];
            std::string bookId  = CPlayBookList::getInstance()->getCurChapter()->m_strBookId;
            CBookInfo *bookInfo = CBookInfoList::getInstance()->getBookInfo(bookId);
            KBBookDetailViewController *detailViewController = [[KBBookDetailViewController alloc] initWithBookInfo:bookInfo];
            [ROOT_NAVI_CONTROLLER pushAddButtonViewController:detailViewController animated:NO];
            break;
        }
        case TAG_BTN_COLLECT:
        {
            UMengLog(KB_PLAY_CONTROL, "collect");
            std::string bookId  = CPlayBookList::getInstance()->getCurChapter()->m_strBookId;
            CBookInfo *bookInfo = CBookInfoList::getInstance()->getBookInfo(bookId);
            if (bookInfo) {
                _hasCollected = !_hasCollected;
                [button setSelected:_hasCollected];
                if (_hasCollected) {
                    CCollectBookList::GetInstance()->AddBookInfo((CRecentBookInfo *)bookInfo);
                    [iToast defaultShow:@"已收藏"];
                }
                else{
                    CCollectBookList::GetInstance()->DeleteBookInfo([[NSString stringWithFormat:@"%s",bookId.c_str()] intValue]);
                    [iToast defaultShow:@"取消收藏"];
                }
            }
            break;
        }
        case TAG_BTN_DOWNLOAD:
        {
            UMengLog(KB_PLAY_CONTROL, "download");
            if (CHttpRequest::GetNetWorkStatus() == NETSTATUS_NONE) {
                [iToast defaultShow:@"网络似乎断开了，请检查连接"];
                return;
            }
            CChapterInfo *chapInfo = CPlayBookList::getInstance()->getCurChapter();
            CLocalBookRequest::GetInstance()->StartDownTask(chapInfo);
            [iToast defaultShow:@"已加入下载列表"];
            _hasDownLoad = !_hasDownLoad;
            if (_hasDownLoad) {
                [button setImage:CImageMgr::GetImageEx("DownloadBtnDown.png") forState:UIControlStateDisabled];
                [button setEnabled:NO];//不能取消下载
            }
            break;
        }
        case TAG_BTN_LAST:
        {
            UMengLog(KB_PLAY_CONTROL, "pre");
            CAudioPlayerManager::getInstance()->playPreChapter();
            break;
        }
        case TAG_BTN_PLAY:
        {
            UMengLog(KB_PLAY_CONTROL, "play");
            if (CAudioPlayerManager::getInstance()->getCurPlayState() == E_AUDIO_PLAY_PLAYING) {
                CAudioPlayerManager::getInstance()->pause();
                [button setSelected:NO];
            }
            else if (CAudioPlayerManager::getInstance()->getCurPlayState() == E_AUDIO_PLAY_PAUSE){
                CAudioPlayerManager::getInstance()->resume();
                [button setSelected:YES];
            }
            else{
                CAudioPlayerManager::getInstance()->play();
                [button setSelected:YES];
            }
            break;
        }
        case TAG_BTN_NEXT:
        {
            UMengLog(KB_PLAY_CONTROL, "next");
            CAudioPlayerManager::getInstance()->playNextChapter();
            break;
        }
        case TAG_BTN_TIMER:
        {
            break;
        }
        case TAG_BTN_EPISODE:
        {
            break;
        }
        default:
            break;
    }
}
-(void)onSliderChanged:(id)sender
{
    UMengLog(KB_PLAY_CONTROL, "seek");
    [self resetTimer];
    UISlider *slider = sender;
    float fPercent = slider.value;
    float totalTime = CAudioPlayerManager::getInstance()->duration();
    float seekTime = totalTime * fPercent;
    CAudioPlayerManager::getInstance()->seek(seekTime);
}
#pragma mark
#pragma mark timer methods

-(void)setTimer
{
    //_closeTimer = [NSTimer scheduledTimerWithTimeInterval:kTimeToClose target:self selector:@selector(onCloseTimer) userInfo:nil repeats:YES];
    _refreshTimer = [NSTimer scheduledTimerWithTimeInterval:kTimeToRefresh target:self selector:@selector(refreshProgress) userInfo:nil repeats:YES];
    [_refreshTimer fire];
}
-(void)onCloseTimer
{
    [self hideAnimation];
}
-(void)resetTimer
{
    if (_closeTimer) {
        [_closeTimer invalidate];
        [self setTimer];
    }
}
#pragma mark
#pragma mark
- (CGSize)getTextDrawSize:(NSString*) str_text{
    
    if(isIOS7()){
        NSMutableAttributedString* str_attr = nil;
        str_attr = [[NSMutableAttributedString alloc] initWithString:str_text];
        NSRange range = NSMakeRange(0, str_attr.length);
        [str_attr addAttribute:(NSString *)kCTFontAttributeName value:(id)CFBridgingRelease(CTFontCreateWithName((CFStringRef)[UIFont systemFontOfSize:17].fontName, 17, NULL)) range:range];
        
        NSDictionary* dic = [str_attr attributesAtIndex:0 effectiveRange:&range];
        return [str_text boundingRectWithSize:CGSizeMake(300, 59) options:NSStringDrawingUsesFontLeading | NSStringDrawingUsesLineFragmentOrigin attributes:dic context:nil].size;
    }else {
        return [str_text sizeWithFont:[UIFont systemFontOfSize:17] constrainedToSize:CGSizeMake(300, 59) lineBreakMode:NSLineBreakByWordWrapping];
    }
}
#pragma mark
#pragma mark observer methosd

-(void)IObserverAudioPlayStateChanged:(AudioPlayState)enumStatus
{
//    if (enumStatus != E_AUDIO_PLAY_NONE) {
//        [self setAllButtonsEnable:YES];
//    }
    UIButton *playBtn = (UIButton *)[self.contentView viewWithTag:TAG_BTN_PLAY];
    if (enumStatus == E_AUDIO_PLAY_PLAYING) {
        [self initializeControls];
        [playBtn setSelected:YES];
    }
    else{
        [playBtn setSelected:NO];
    }
}

@end
