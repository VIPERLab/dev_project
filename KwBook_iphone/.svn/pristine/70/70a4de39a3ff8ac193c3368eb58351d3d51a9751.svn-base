//
//  KBNetAudioPlayer.m
//  kwbook
//
//  Created by 单 永杰 on 13-11-29.
//  Copyright (c) 2013年 单 永杰. All rights reserved.
//

#import "KBNetAudioPlayer.h"
#import "DOUAudioStreamer.h"
#import "DOUAudioStreamer+Options.h"

static void *kStatusKVOKey = &kStatusKVOKey;
static void *kDurationKVOKey = &kDurationKVOKey;
static void *kBufferingRatioKVOKey = &kBufferingRatioKVOKey;

@interface Track : NSObject <DOUAudioFile>
@property (nonatomic, strong) NSURL *url;
@end

@implementation Track
- (NSURL *)audioFileURL
{
    return [self url];
}
@end

@interface KBNetAudioPlayer (){
@private
    DOUAudioStreamer *_streamer;
}

@end

@implementation KBNetAudioPlayer

- (BOOL) resetPlayer : (CSongInfoBase*) song_info{
    [DOUAudioStreamer setOptions:[DOUAudioStreamer options] | DOUAudioStreamerRequireSHA256];
    
    if (_streamer != nil) {
        [_streamer pause];
        [_streamer removeObserver:self forKeyPath:@"status"];
        [_streamer removeObserver:self forKeyPath:@"duration"];
        [_streamer removeObserver:self forKeyPath:@"bufferingRatio"];
        _streamer = nil;
    }
    
    //  Track *track = [_tracks objectAtIndex:_currentIndex];
    Track* track = [[Track alloc] init];
    track.url = [NSURL URLWithString : [NSString stringWithFormat:@"%s", song_info->bookRes.strUrl.c_str()]];
    
    _streamer = [DOUAudioStreamer streamerWithAudioFile:track];
    [_streamer addObserver:self forKeyPath:@"status" options:NSKeyValueObservingOptionNew context:kStatusKVOKey];
    [_streamer addObserver:self forKeyPath:@"duration" options:NSKeyValueObservingOptionNew context:kDurationKVOKey];
    [_streamer addObserver:self forKeyPath:@"bufferingRatio" options:NSKeyValueObservingOptionNew context:kBufferingRatioKVOKey];
    
    [_streamer play];

    [DOUAudioStreamer setHintWithAudioFile:track];
    
    return YES;
}


//use for notify net audio player playing state. By Shan Yongjie
- (void)_updateStatus
{
    switch ([_streamer status]) {
        case DOUAudioStreamerPlaying:
//            [_labelInfo setText:@"playing"];
//            [_buttonPlayPause setTitle:@"Pause" forState:UIControlStateNormal];
            break;
            
        case DOUAudioStreamerPaused:
//            [_labelInfo setText:@"paused"];
//            [_buttonPlayPause setTitle:@"Play" forState:UIControlStateNormal];
            break;
            
        case DOUAudioStreamerIdle:
//            [_labelInfo setText:@"idle"];
//            [_buttonPlayPause setTitle:@"Play" forState:UIControlStateNormal];
            break;
            
        case DOUAudioStreamerFinished:
//            [_labelInfo setText:@"finished"];
//            [self actionNext:nil];
            break;
            
        case DOUAudioStreamerBuffering:
//            [_labelInfo setText:@"buffering"];
            break;
            
        case DOUAudioStreamerError:
//            [_labelInfo setText:@"error"];
            break;
    }
}

//use for notify net audio player buffering state. By Shan Yongjie
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
    if (context == kStatusKVOKey) {
        [self performSelector:@selector(_updateStatus)
                     onThread:[NSThread mainThread]
                   withObject:nil
                waitUntilDone:NO];
    }
    else if (context == kBufferingRatioKVOKey) {
        [self performSelector:@selector(_updateBufferingStatus)
                     onThread:[NSThread mainThread]
                   withObject:nil
                waitUntilDone:NO];
    }
    else {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}

- (BOOL) resume{
    if (DOUAudioStreamerPaused == [_streamer status] || DOUAudioStreamerIdle == [_streamer status]) {
        [_streamer play];
        
        return YES;
    }
    
    return NO;
}

- (BOOL) pause{
    if (!(DOUAudioStreamerPaused == [_streamer status] || DOUAudioStreamerIdle == [_streamer status])) {
        [_streamer pause];
        
        return YES;
    }
    
    return NO;
}

- (BOOL) stop{
    [_streamer stop];
    
    return YES;
}

- (BOOL) seek : (float) f_seek_sec{
    [_streamer setCurrentTime : f_seek_sec];
    
    return YES;
}

- (float) currentTime{
    return [_streamer currentTime];
}

- (float) duration{
    return [_streamer duration];
}

@end
