//
//  CategoryViewController.m
//  kwbook
//
//  Created by 熊 改 on 13-11-28.
//  Copyright (c) 2013年 单 永杰. All rights reserved.
//

#import "CategoryViewController.h"
#import "globalm.h"
#import "ImageMgr.h"
#import "CacheMgr.h"
#import "KBUrls.h"
#import "SBJson4.h"
#import "CategoryList.h"
#import "HttpRequest.h"
#import "iToast.h"
#import "KBRefreshFootView.h"
#import "BookInfo.h"
#import "KwTools.h"
#import "KBBookDetailViewController.h"
#import "BookListViewController.h"
#import "KBSearchViewController.h"
#import "KBAppDelegate.h"


#define TAG_IMAGE           41
#define TAG_BOOK_NAME       42
#define TAG_ARTIST_NAME     43
#define TAG_MUSIC_COUNT     44
#define TAG_LISTEN_COUNT    45

#define TAG_CELL_LOAD_DONE           46
#define TAG_CELL_NEED_LOAD           47

const std::string kCategoryListKey = "categoryListKey";
const int kNumOfBooksInOnePage = 30;

@interface CategoryViewController ()<UITableViewDataSource,UITableViewDelegate,CateListDelegate,KBRefreshBaseViewDelegate>
{
    KBRefreshFootView       *_footView;
    UIButton                *_titleBtn;
    
    std::vector<CBookInfo>  bookList;
    
    unsigned long           _totalNum;
    unsigned                _currentPage;
    
    CGFloat _lastOffset;
    
    BOOL _isScrolling;
}
@property (nonatomic , strong) UIView                   *topBar;
@property (nonatomic , strong) UILabel                  *titleLabel;
@property (nonatomic , strong) UITableView              *tableView;
@property (nonatomic , strong) CategoryList             *cateListView;
@property (nonatomic , strong) NSMutableDictionary      *categoryDic;   //id:name
@property (nonatomic , strong) NSMutableArray           *cateIds;
@property (nonatomic , strong) NSMutableArray           *cateNames;
@property (nonatomic , strong) NSString                 *theSelectKey;

-(void)fetchCategoryList;
@end

@implementation CategoryViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        _categoryDic = [NSMutableDictionary dictionary];
        _cateIds = [NSMutableArray array];
        _cateNames = [NSMutableArray array];
        _currentPage = 1;
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
    
    [self fetchCategoryList];
    
    float gap = 0.0;
    if (isIOS7()) {
        gap = 20;
    }
    float width  = self.view.bounds.size.width;
    float height = self.view.bounds.size.height;
    self.topBar = ({
        UIView *topBar = [[UIView alloc] initWithFrame:CGRectMake(0, 0, width, 44+gap)];
        UIImageView *backView = [[UIImageView alloc] initWithFrame:topBar.bounds];
        if (isIOS7()) {
            [backView setImage:CImageMgr::GetImageEx("RecoTopBackFor7.png")];
        }
        else{
            [backView setImage:CImageMgr::GetImageEx("RecoTopBackFor6.png")];
        }
        [topBar addSubview:backView];

        UIButton *searchBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [searchBtn setFrame:CGRectMake(276, gap, 44, 44)];
        [searchBtn setBackgroundImage:CImageMgr::GetImageEx("searchBtn.png") forState:UIControlStateNormal];
        [searchBtn addTarget:self action:@selector(onSearchBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        [topBar addSubview:searchBtn];
        
        self.titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(70, gap, 180, 44)];
        [self.titleLabel setBackgroundColor:[UIColor clearColor]];
        [self.titleLabel setText:@"相声小品"];
        [self.titleLabel setTextAlignment:NSTextAlignmentCenter];
        [self.titleLabel setTextColor:[UIColor whiteColor]];
        [self.titleLabel setFont:[UIFont systemFontOfSize:20.0]];
        [topBar addSubview:self.titleLabel];
        
        _titleBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_titleBtn setFrame:CGRectMake(0, 0, 125, 44)];
        [_titleBtn setImage:CImageMgr::GetImageEx("titleDown.png") forState:UIControlStateNormal];
        [_titleBtn setImage:CImageMgr::GetImageEx("titleUp.png") forState:UIControlStateSelected];
        [_titleBtn setCenter:CGPointMake(170, gap+22)];
        [_titleBtn addTarget:self action:@selector(onShowBtnClick) forControlEvents:UIControlEventTouchUpInside];
        [topBar addSubview:_titleBtn];
        
        topBar;
    });
    [[self view] addSubview:self.topBar];
    
    self.tableView = ({
        UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, self.topBar.bounds.size.height, width, height-self.topBar.bounds.size.height)];
        [tableView setBackgroundColor:CImageMgr::GetBackGroundColor()];
        [tableView setDelegate:self];
        [tableView setDataSource:self];
        tableView;
    });
    [[self view] addSubview:self.tableView];
    [self setTipsRect:self.tableView.frame];
    
    _footView = [KBRefreshFootView footer];
    [_footView setScrollView:self.tableView];
    [_footView setDelegate:self];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
-(void)tableViewNeedChange
{
    [self showLoadingPage:YES descript:nil];
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSData *jsonData = [self fetchJsonData];
        [self parserJsonData:jsonData];
        dispatch_async(dispatch_get_main_queue(), ^{
            [self reloadView];
        });
    });
}
-(void)onTap
{
    if(NETSTATUS_NONE == CHttpRequest::GetNetWorkStatus()){
        [iToast defaultShow:@"网络似乎断开了，请检查连接"];
        return;
    }
    if (!self.categoryDic || self.categoryDic.count==0) {
        [self fetchCategoryList];
    }
    else{
        [self tableViewNeedChange];
    }
}

#pragma mark
#pragma mark action methods
-(void)onShowBtnClick
{
    [_titleBtn setSelected:!_titleBtn.selected];
    if (_titleBtn.selected) {
        [self showCateListView];
    }
    else{
        [self hideCateListView];
    }
}
-(void)onSearchBtnClick:(id)sender
{
    KBSearchViewController *searchViewController = [[KBSearchViewController alloc] init];
    [self.navigationController pushAddButtonViewController:searchViewController animated:YES];
}
#pragma mark
#pragma mark get and parse json data

-(NSData *)fetchJsonData
{
    __block void* jsonData = NULL;
    __block unsigned length = 0;
    
    NSString *strUrl = [NSString stringWithFormat:@"%@stype=json&srcver=storynew&type=sub_list&id=%@&pn=%d&ps=%d",
                            BASE_URL,self.theSelectKey,_currentPage,kNumOfBooksInOnePage];
    CHttpRequest::QuickSyncGet([strUrl UTF8String],jsonData,length);
    NSData* data=[NSData dataWithBytesNoCopy:jsonData length:length freeWhenDone:YES];
    return data;
}
-(BOOL)parserJsonData:(NSData *)jsonData;
{
    if (jsonData == nil) {
        return NO;
    }
    SBJson4ValueBlock block = ^(id item, BOOL *stop){
        NSDictionary *dic = item;
        
        NSString *totalCount = [dic objectForKey:@"totalcount"];
        _totalNum = [totalCount integerValue];
        
        NSArray *array = [dic objectForKey:@"album_list"];
        for (NSDictionary *itemDic in array) {
            CBookInfo info;
            info.m_strBookId    = [[itemDic objectForKey:@"relid"] UTF8String];
            info.m_strBookTitle = [KwTools::Encoding::UrlDecode([itemDic objectForKey:@"name"]) UTF8String];
            info.m_strArtist    = [KwTools::Encoding::UrlDecode([itemDic objectForKey:@"artist"]) UTF8String];
            info.m_unCount      = [[itemDic objectForKey:@"musiccnt"] intValue];
            info.m_unListenCnt  = [[itemDic objectForKey:@"listencnt"] intValue];
            info.m_unType       = [[itemDic objectForKey:@"type"] intValue];
            info.m_strImgUrl    = [[itemDic objectForKey:@"pic"] UTF8String];
            info.m_strSummary   = [[itemDic objectForKey:@"desc"] UTF8String];
            bookList.push_back(info);
        }
    };
    SBJson4ErrorBlock eh = ^(NSError *error){
        NSLog(@"parser json error:%@",error);
    };
    SBJson4Parser *parser = [SBJson4Parser parserWithBlock:block allowMultiRoot:NO unwrapRootArray:NO errorHandler:eh];
    [parser parse:jsonData];
    return YES;
}

-(void)reloadView
{
    if (NETSTATUS_NONE == CHttpRequest::GetNetWorkStatus())
        [self showNoNetWorkPage];
    else{
        [self removeNoNetPage];
        if (bookList.size() == 0)
            [self showLoadFailPage];
        else
            [self removeLoadFailPage];
    }
    [_footView performSelector:@selector(endRefreshing) withObject:nil afterDelay:1.0];
    
    if (bookList.size() >= _totalNum) {
        [_footView setHidden:YES];
    }
    else{
        [_footView setHidden:NO];
    }
    [self showLoadingPage:NO descript:nil];
    [self.tableView reloadData];
    [self.tableView setContentOffset:CGPointZero];
}

#pragma mark
#pragma mark foot refresh delegate
- (void)refreshViewBeginRefreshing:(KBRefreshBaseView *)refreshView
{
    _currentPage++;
    [self tableViewNeedChange];
}
#pragma mark
#pragma mark show and hidden animation
-(void)showCateListView
{
    float fcount = self.cateIds.count;
    int  _numOfRows = ceil((fcount/4)) + 1;
    self.cateListView.frame = TopRect(self.tableView.frame, 0, -(43*(_numOfRows-1)+24));
    [self.cateListView setHidden:NO];
    
    //[self.cateListView setBackgroundColor:[UIColor clearColor]];
    [UIView animateWithDuration:0.5 animations:^{
        [self.cateListView setFrame:self.tableView.frame];
    } completion:^(BOOL finished) {
        //[self.cateListView setBackgroundColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:0.5]];
    } ];
}
-(void)hideCateListView
{
    float fcount = self.cateIds.count;
    int  _numOfRows = ceil((fcount/4)) + 1;
    
    [UIView animateWithDuration:0.5 animations:^{
        [self.cateListView setFrame:TopRect(self.tableView.frame, 0 , -(43*(_numOfRows-1)+24))];
    } completion:^(BOOL finished) {
        [self.cateListView setHidden:YES];
    }];
    
}
#pragma mark
#pragma mark fetch list data
-(void)fetchCategoryList
{
    __block void* jsonData = NULL;
    __block unsigned length = 0;
    __block NSData *cateData = nil;
    __block BOOL outOfTime;
    
    SBJson4ValueBlock block = ^(id item, BOOL *stop){
        NSDictionary *dic = item;
        
        NSArray *array = [dic objectForKey:@"album_list"];
        for (NSDictionary *itemDic in array) {
            NSString *cateId = [itemDic objectForKey:@"relid"];
            NSString *cateName = [itemDic objectForKey:@"name"];
            [self.categoryDic setObject:cateName forKey:cateId];
            [self.cateIds addObject:cateId];
            [self.cateNames addObject:cateName];
            if (!self.theSelectKey) {
                self.theSelectKey = cateId;
            }
        }
    };
    SBJson4ErrorBlock eh = ^(NSError *error){
        NSLog(@"parser json error:%@",error);
    };
    SBJson4Parser *parser = [SBJson4Parser parserWithBlock:block allowMultiRoot:NO unwrapRootArray:NO errorHandler:eh];
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        if (CCacheMgr::GetInstance()->Read(kCategoryListKey, jsonData, length, outOfTime)) {
            cateData =[NSData dataWithBytesNoCopy:jsonData length:length freeWhenDone:YES];
        }
        else{
            NSString *strUrl = [NSString stringWithFormat:@"%@stype=json&srcver=storynew&type=story_list&id=2&parentid=0",BASE_URL];
            cateData = [NSData dataWithContentsOfURL:[NSURL URLWithString:strUrl]];
            CCacheMgr::GetInstance()->Cache(T_DAY, 3, kCategoryListKey, [cateData bytes], [cateData length]);
        }
        
        dispatch_async(dispatch_get_main_queue(), ^{
            if (cateData) {
                [self showLoadingPage:YES descript:nil];
                [self.categoryDic removeAllObjects];
                [self.cateIds removeAllObjects];
                [self.cateNames removeAllObjects];
                [parser parse:cateData];
                [self.titleLabel setText:[self.categoryDic objectForKey:self.theSelectKey]];
                bookList.clear();
                [self tableViewNeedChange];
                self.cateListView = ({
                    CategoryList *cateListView = [[CategoryList alloc] initWithCateList:self.categoryDic andKeyArray:self.cateIds andFrame:self.tableView.frame defaultKey:self.theSelectKey];
                    [cateListView setDelegate:self];
                    [cateListView setHidden:NO];
                    cateListView;
                });
                [[self view] addSubview:self.cateListView];
                [[self view] bringSubviewToFront:self.topBar];
                [self onShowBtnClick];
            }
            else{
                [self showNoNetWorkPage];
                [iToast defaultShow:@"网络不给力，获取数据失败"];
            }
        });
    });
}
#pragma mark
#pragma mark Cate list view delegate
-(void)closeCateListViewWithSelectedKey:(NSString *)key
{
    [self onShowBtnClick];
    if (key) {
        _currentPage = 1;
        self.theSelectKey = key;
        NSString *value = self.categoryDic[key];
        [self.titleLabel setText:value];
        bookList.clear();
        [self tableViewNeedChange];
    }
}
#pragma mark
#pragma mark load image
-(void)loadImageAnIndex:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];
    if (cell) {
        unsigned index = indexPath.row;
        if (index < bookList.size()) {
            CBookInfo info = bookList.at(index);
            NSString *strURL = [NSString stringWithFormat:@"%s",info.m_strImgUrl.c_str()];
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:strURL]];
                if (data) {
                    UIImage *image = [UIImage imageWithData:data];
                    dispatch_async(dispatch_get_main_queue(), ^{
                        UIImageView *imageView = (UIImageView *)[cell.contentView viewWithTag:TAG_IMAGE];
                        [cell setTag:TAG_CELL_LOAD_DONE];
                        [imageView setAlpha:0.0];
                        [UIView animateWithDuration:0.5 animations:^{
                            [imageView setImage:image];
                            [imageView setAlpha:1.0];
                        }];
                    });
                }
            });
        }
    }
}

#pragma mark
#pragma mark table view data source
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return bookList.size();
}
-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSString *categoryCellIdentifier = [NSString stringWithFormat:@"cateCell%@%d",self.theSelectKey,indexPath.row];
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:categoryCellIdentifier];
    if (cell == nil || cell.tag != TAG_CELL_LOAD_DONE) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:categoryCellIdentifier];
        [cell setSelectionStyle:UITableViewCellSelectionStyleGray];
        [cell.contentView setBackgroundColor:CImageMgr::GetBackGroundColor()];
        if (isIOS7()) {
            [cell setSeparatorInset:UIEdgeInsetsZero];
        }
        
        UIImageView *bookBack = [[UIImageView alloc] initWithFrame:CGRectMake(2.5, 2.5, 69, 69)];
        [bookBack setImage:CImageMgr::GetImageEx("BookPicBack.png")];
        [cell.contentView addSubview:bookBack];
        
        UIImageView *headPic = [[UIImageView alloc] initWithFrame:CGRectMake(7, 7, 60, 60)];
        [headPic setImage:CImageMgr::GetImageEx("DefaultBookImageSmall.png")];
        [headPic setTag:TAG_IMAGE];
        [cell.contentView addSubview:headPic];
        
        UILabel *bookNameLabel = [[UILabel alloc] initWithFrame:CGRectMake(77, 18, 200, 17)];
        [bookNameLabel setTag:TAG_BOOK_NAME];
        [bookNameLabel setTextColor:defaultBlackColor()];
        [bookNameLabel setBackgroundColor:[UIColor clearColor]];
        [bookNameLabel setFont:[UIFont systemFontOfSize:16.0]];
        [cell.contentView addSubview:bookNameLabel];
        
        UILabel *musicCountLabel = [[UILabel alloc] initWithFrame:CGRectMake(77, 51, 60, 11)];
        [musicCountLabel setTag:TAG_MUSIC_COUNT];
        [musicCountLabel setTextColor:defaultGrayColor()];
        [musicCountLabel setBackgroundColor:[UIColor clearColor]];
        [musicCountLabel setFont:[UIFont systemFontOfSize:10.0]];
        [cell.contentView addSubview:musicCountLabel];
        
        UILabel *listenCountLabel = [[UILabel alloc] initWithFrame:CGRectMake(135, 51, 70, 11)];
        [listenCountLabel setTag:TAG_LISTEN_COUNT];
        [listenCountLabel setTextColor:defaultGrayColor()];
        [listenCountLabel setBackgroundColor:[UIColor clearColor]];
        [listenCountLabel setFont:[UIFont systemFontOfSize:10.0]];
        [cell.contentView addSubview:listenCountLabel];
        
        UILabel *artistLabel = [[UILabel alloc] initWithFrame:CGRectMake(205, 51, 75, 11)];
        [artistLabel setTag:TAG_ARTIST_NAME];
        [artistLabel setTextColor:defaultGrayColor()];
        [artistLabel setBackgroundColor:[UIColor clearColor]];
        [artistLabel setFont:[UIFont systemFontOfSize:10.0]];
        [cell.contentView addSubview:artistLabel];
        
        UIImageView *accessaryView = [[UIImageView alloc] initWithImage:CImageMgr::GetImageEx("cellIndicator.png")];
        [accessaryView setCenter:CGPointMake(300, 37.0)];
        [cell.contentView addSubview:accessaryView];
        
        [self performSelector:@selector(loadImageAnIndex:) withObject:indexPath afterDelay:0.5];
    }
    unsigned row = indexPath.row;
    if (row < bookList.size()) {
        CBookInfo info = bookList.at(row);
        
        UILabel *bookNameLabel = (UILabel *)[cell.contentView viewWithTag:TAG_BOOK_NAME];
        [bookNameLabel setText:[NSString stringWithUTF8String:info.m_strBookTitle.c_str()]];
        
        UILabel *artistLabel = (UILabel *)[cell.contentView viewWithTag:TAG_ARTIST_NAME];
        [artistLabel setText:[NSString stringWithFormat:@"播讲人:%@",[NSString stringWithUTF8String:info.m_strArtist.c_str()]]];
        NSString *string = nil;
        if (info.m_unType == 1) {
            [artistLabel setHidden:NO];
            string = @"回";
        }
        else{
            [artistLabel setHidden:YES];
            string = @"部作品";
        }
        UILabel *musicCountLabel = (UILabel *)[cell.contentView viewWithTag:TAG_MUSIC_COUNT];
        [musicCountLabel setText:[NSString stringWithFormat:@"共%u%@",info.m_unCount,string]];
        
        UILabel *listenCountLabel = (UILabel *)[cell.contentView viewWithTag:TAG_LISTEN_COUNT];
        [listenCountLabel setText:[NSString stringWithFormat:@"%u人在听",info.m_unListenCnt]];
    }
    return cell;
}
#pragma mark
#pragma mark table view delegate
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 74.0f;
}
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    unsigned row = indexPath.row;
    if (row < bookList.size()) {
        CBookInfo info = bookList.at(row);
        if (info.m_unType ==1 || info.m_unType == 2) {
            KBBookDetailViewController *detailViewController = [[KBBookDetailViewController alloc] initWithBookInfo:&info];
            [detailViewController setPlaySource:E_SOURCE_CATEGORY];
            [ROOT_NAVI_CONTROLLER pushAddButtonViewController:detailViewController animated:YES];
        }
        else{
            NSString *theId = [NSString stringWithUTF8String:info.m_strBookId.c_str()];
            NSString *theName = [NSString stringWithUTF8String:info.m_strBookTitle.c_str()];
            BookListViewController *bookListViewController = [[BookListViewController alloc] initWithBookListId:theId andName:theName];
            [bookListViewController setType:BOOKLIST_CATE];
            [self.navigationController pushAddButtonViewController:bookListViewController animated:YES];
        }
    }
}
#pragma mark
#pragma mark scroll view delegate
/*
-(void)scrollViewDidScroll:(UIScrollView *)sender
{
    [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(scrollViewDidEndScrollingAnimation:) object:sender];
    [self performSelector:@selector(scrollViewDidEndScrollingAnimation:) withObject:sender afterDelay:0.3];
    if (!_isScrolling) {
        _isScrolling = YES;
        //[self performSelector:@selector(scrollViewBeginScrolling:) withObject:sender];
    }
}
//-(void)scrollViewBeginScrolling:(UIScrollView *)scrollView
//{
//    [self.rootViewController.contentViewController setKSongButtonHidden:YES];
//}
-(void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView
{
    CGFloat thisOffset = scrollView.contentOffset.y;
    
    if (thisOffset > _lastOffset) {
        [self.footDelegate hideFoot];
    }
    else{
        [self.footDelegate showFoot];
    }
    
    _lastOffset = thisOffset;
    _isScrolling = NO;
}
*/
@end
